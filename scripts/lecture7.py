# -*- coding: utf-8 -*-
"""Lecture7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_7afOm1oOeVT7u523NuRn2esWYt7-HIF
"""

# vẽ biểu đồ tần suất không có kernel density
import pandas as pd
import seaborn as sns
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x=df.values[:,0]
sns.distplot(x, hist=True, kde=False, color = 'blue',
             hist_kws={'edgecolor':'black'})

# vẽ biểu đồ tần suất có kernel density
import pandas as pd
import seaborn as sns
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x=df.values[:,0]
sns.distplot(x, hist=True, kde=True, color = 'blue',
             hist_kws={'edgecolor':'black'})

# tính trung bình và phương sai
import numpy as np
import pandas as pd
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x=df.values[:,0]
print(np.mean(x))
print(np.var(x))

# khoảng ước lượng của GTTB của pp chuẩn
import numpy as np
import pandas as pd
from scipy.stats import t
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x = df.values[:,0]
n = len(x)
xbar =np.mean(x)
s = np.std(x)
t = t.ppf(1-(1-0.9)/2,n-1)
L = xbar - t*s/np.sqrt(n)
U = xbar + t*s/np.sqrt(n)
print(L, U)

# khoảng ước lượng của GTTB với kích thước mẫu lớn
import numpy as np
import pandas as pd
from scipy.stats import norm
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x = df.values[:,0]
n = len(x)
xbar =np.mean(x)
s = np.std(x)
Z = norm.ppf(1-(1-0.9)/2)
L = xbar - Z*s/np.sqrt(n)
U = xbar + Z*s/np.sqrt(n)
print(L, U)

# khoảng ước lượng của GTTB bằng pp bootstrap
import numpy as np
import pandas as pd
from sklearn.utils import resample
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x = df.values[:,0]
xnew=x[0:15]
xbarnew = np.mean(xnew)
print(xbarnew)
n_iterations = 1000
n_size = len(xnew)
# run bootstrap
stats = []
for i in range(n_iterations):
	Xb = resample(xnew,n_samples=n_size)
	stats.append(np.mean(Xb)-xbarnew)
# confidence interval
alpha = 1 - 0.9
Z1 = np.percentile(stats, 100*alpha/2)
print(Z1)
Z2 = np.percentile(stats, 100*(1-alpha/2))
print(Z2)
L = xbarnew - Z2
U = xbarnew - Z1
print(L, U)

# ước lượng của tỷ lệ
import numpy as np
import pandas as pd
from scipy.stats import norm
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x = df.values[:,0]
n = len(x)
k = 200
count = sum(i > k for i in x)
pmu = count/n
print(pmu)
Z = norm.ppf(1-(1-0.9)/2)
L = pmu - Z*np.sqrt(pmu*(1-pmu)/n)
U = pmu + Z*np.sqrt(pmu*(1-pmu)/n)
print(L, U)

# ước lượng của tỷ lệ bằng pp Bootstrap
import numpy as np
import pandas as pd
from sklearn.utils import resample
df = pd.read_csv("/content/drive/My Drive/Dataset/data1_lecture7.csv")
x = df.values[:,0]
xnew=x[0:25]
k=200
n_size = len(xnew)
count = sum(i > k for i in xnew)
pmu = count/n_size
print(pmu)
n_iterations = 500
# run bootstrap
sigma = []
for i in range(n_iterations):
	Xb = resample(xnew,n_samples=n_size)
	sigma.append(sum(j > 200 for j in Xb)/n_size - pmu)
# confidence interval
alpha = 1 - 0.9
Z1 = np.percentile(sigma, 100*alpha/2)
print(Z1)
Z2 = np.percentile(sigma, 100*(1-alpha/2))
print(Z2)
L = pmu - Z2
U = pmu - Z1
print(L, U)

# phân bố mũ: vẽ biểu đồ tần suất
import pandas as pd
import seaborn as sns
import numpy as np
df = pd.read_csv("/content/drive/My Drive/Dataset/data2_lecture7.csv")
x=df.values[:,0]
sns.distplot(x, hist=True, kde=False, color = 'blue',
             hist_kws={'edgecolor':'black'})

# ước lượng của tham số theta
print(1/np.mean(x))

# khoảng ước lượng của tham số theta với kích thước mẫu lớn
from scipy.stats import norm
xbar=np.mean(x)
print(xbar)
n=72
Z = norm.ppf(1-0.05)
print(Z)
L = (1-Z/np.sqrt(n))/xbar
U = (1+Z/np.sqrt(n))/xbar
print(L,U)

# khoảng ước lượng của tham số theta bằng pp Boostrap
import numpy as np
import pandas as pd
from sklearn.utils import resample
df = pd.read_csv("/content/drive/My Drive/Dataset/data2_lecture7.csv")
x = df.values[:,0]
xnew=x[0:10]
stats = 1/np.mean(xnew)
print(stats)
n_iterations = 500
n_size = len(xnew)
# run bootstrap
sigma = []
for i in range(n_iterations):
	Xb = resample(xnew,n_samples=n_size)
	sigma.append(1/np.mean(Xb)-stats)
# confidence interval
alpha = 1 - 0.9
Z1 = np.percentile(sigma, 100*alpha/2)
print(Z1)
Z2 = np.percentile(sigma, 100*(1-alpha/2))
print(Z2)
L = stats - Z2
U = stats - Z1
print(L, U)